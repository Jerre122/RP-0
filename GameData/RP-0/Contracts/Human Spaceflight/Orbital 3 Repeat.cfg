////////////////////////////
CONTRACT_TYPE
{
	name = HSFOrbitalLEO3Repeatable
	group = HumanContracts
	
	title = Human Orbital (3/LEO)
	
	description = Launch a crewed spacecraft capable of supporting at least three people into orbit for a routine mission (must orbit for @/DurationText days) and return safely home.
	genericDescription = Launch a crewed spacecraft capable of supporting at least three people into orbit for a routine mission for the specified number of days and return safely home.
	
	synopsis = Fly a three-person LEO Orbital mission.
	
	completedMessage = Crew alive and well after the mission--congratulations!
	
	cancellable = true
	declinable = true
	deadline = 180 // 6 months
	
	prestige = Trivial
	
	targetBody = HomeWorld()
	
	maxSimultaneous = 1
	
	// reward block
	advanceFunds = 6000 * (8 + (@DurationText * 0.2))
	rewardReputation = 7.0 * (8 + (@DurationText * 0.2))
	rewardFunds = 6000 * (8 + (@DurationText * 0.2))
	failureReputation = 21.0 * (8 + (@DurationText * 0.2))
	failureFunds = @advanceFunds * 1.5
	
	
	REQUIREMENT
	{
		name = ReqCapsules
		type = TechResearched
		tech = commandModules
	}
	REQUIREMENT
	{
		name = CompleteContractHSFOrbit
		type = CompleteContract
		contractType = HSFOrbitalLEO1Repeatable
	}
	DATA
	{
		type = Duration
		title = Duration
		Duration = Round(Random(7d, 14d), 1d)
	}
	DATA
	{
		type = int
		DurationText = double(@Duration) / 86400
	}
	DATA
	{
		type = int
		startPeA = 200000 + Round(Random(0, 100000), 25000)
	}
	DATA
	{
		type = int
		startApA = 300000 + Round(Random(0, 200000), 25000)
	}
	DATA
	{
		type = double
		Eccentricity = (1000.0 - Reputation() ) / 10000.0
	}
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Crewed Orbital
		define = orbitalCrewedSpacecraft
	
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 3
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = @/startPeA
			maxApA = @/startApA
			maxEccentricity = @/Eccentricity
			targetBody = HomeWorld()
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = @/Duration
			preWaitText = Reach specified orbit.
			waitingText = Orbiting...
			completionText = Orbits completed, you may fire retros when ready.
		}

		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			completeInSequence = true
		}
	}
}
